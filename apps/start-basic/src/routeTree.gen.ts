/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StaticRouteRouteImport } from './routes/_static/route'
import { Route as StaticIndexRouteImport } from './routes/_static/index'
import { Route as StaticDatabaseIndexRouteImport } from './routes/_static/database/index'
import { Route as StaticAuthIndexRouteImport } from './routes/_static/auth/index'
import { Route as StaticDatabaseQueriesRouteImport } from './routes/_static/database/queries'
import { Route as StaticAuthClientRouteImport } from './routes/_static/auth/client'

const StaticRouteRoute = StaticRouteRouteImport.update({
  id: '/_static',
  getParentRoute: () => rootRouteImport,
} as any)
const StaticIndexRoute = StaticIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticDatabaseIndexRoute = StaticDatabaseIndexRouteImport.update({
  id: '/database/',
  path: '/database/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticAuthIndexRoute = StaticAuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticDatabaseQueriesRoute = StaticDatabaseQueriesRouteImport.update({
  id: '/database/queries',
  path: '/database/queries',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticAuthClientRoute = StaticAuthClientRouteImport.update({
  id: '/auth/client',
  path: '/auth/client',
  getParentRoute: () => StaticRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof StaticIndexRoute
  '/auth/client': typeof StaticAuthClientRoute
  '/database/queries': typeof StaticDatabaseQueriesRoute
  '/auth': typeof StaticAuthIndexRoute
  '/database': typeof StaticDatabaseIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof StaticIndexRoute
  '/auth/client': typeof StaticAuthClientRoute
  '/database/queries': typeof StaticDatabaseQueriesRoute
  '/auth': typeof StaticAuthIndexRoute
  '/database': typeof StaticDatabaseIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_static': typeof StaticRouteRouteWithChildren
  '/_static/': typeof StaticIndexRoute
  '/_static/auth/client': typeof StaticAuthClientRoute
  '/_static/database/queries': typeof StaticDatabaseQueriesRoute
  '/_static/auth/': typeof StaticAuthIndexRoute
  '/_static/database/': typeof StaticDatabaseIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth/client' | '/database/queries' | '/auth' | '/database'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth/client' | '/database/queries' | '/auth' | '/database'
  id:
    | '__root__'
    | '/_static'
    | '/_static/'
    | '/_static/auth/client'
    | '/_static/database/queries'
    | '/_static/auth/'
    | '/_static/database/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  StaticRouteRoute: typeof StaticRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_static': {
      id: '/_static'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StaticRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_static/': {
      id: '/_static/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof StaticIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/database/': {
      id: '/_static/database/'
      path: '/database'
      fullPath: '/database'
      preLoaderRoute: typeof StaticDatabaseIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/auth/': {
      id: '/_static/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof StaticAuthIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/database/queries': {
      id: '/_static/database/queries'
      path: '/database/queries'
      fullPath: '/database/queries'
      preLoaderRoute: typeof StaticDatabaseQueriesRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/auth/client': {
      id: '/_static/auth/client'
      path: '/auth/client'
      fullPath: '/auth/client'
      preLoaderRoute: typeof StaticAuthClientRouteImport
      parentRoute: typeof StaticRouteRoute
    }
  }
}

interface StaticRouteRouteChildren {
  StaticIndexRoute: typeof StaticIndexRoute
  StaticAuthClientRoute: typeof StaticAuthClientRoute
  StaticDatabaseQueriesRoute: typeof StaticDatabaseQueriesRoute
  StaticAuthIndexRoute: typeof StaticAuthIndexRoute
  StaticDatabaseIndexRoute: typeof StaticDatabaseIndexRoute
}

const StaticRouteRouteChildren: StaticRouteRouteChildren = {
  StaticIndexRoute: StaticIndexRoute,
  StaticAuthClientRoute: StaticAuthClientRoute,
  StaticDatabaseQueriesRoute: StaticDatabaseQueriesRoute,
  StaticAuthIndexRoute: StaticAuthIndexRoute,
  StaticDatabaseIndexRoute: StaticDatabaseIndexRoute,
}

const StaticRouteRouteWithChildren = StaticRouteRoute._addFileChildren(
  StaticRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  StaticRouteRoute: StaticRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
