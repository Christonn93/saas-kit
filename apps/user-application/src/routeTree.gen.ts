/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as StaticRouteRouteImport } from './routes/_static/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as StaticIndexRouteImport } from './routes/_static/index'
import { Route as StaticDatabaseRouteImport } from './routes/_static/database'
import { Route as StaticAuthIndexRouteImport } from './routes/_static/auth/index'
import { Route as AuthedAppIndexRouteImport } from './routes/_authed/app/index'
import { Route as StaticAuthClientRouteImport } from './routes/_static/auth/client'
import { Route as AuthedAppUserRouteImport } from './routes/_authed/app/user'
import { Route as AuthedAppPaymentLinksRouteImport } from './routes/_authed/app/payment-links'
import { Route as AuthedAppPolarCheckoutSuccessRouteImport } from './routes/_authed/app/polar-checkout.success'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth.$'

const rootServerRouteImport = createServerRootRoute()

const StaticRouteRoute = StaticRouteRouteImport.update({
  id: '/_static',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const StaticIndexRoute = StaticIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticDatabaseRoute = StaticDatabaseRouteImport.update({
  id: '/database',
  path: '/database',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticAuthIndexRoute = StaticAuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const AuthedAppIndexRoute = AuthedAppIndexRouteImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const StaticAuthClientRoute = StaticAuthClientRouteImport.update({
  id: '/auth/client',
  path: '/auth/client',
  getParentRoute: () => StaticRouteRoute,
} as any)
const AuthedAppUserRoute = AuthedAppUserRouteImport.update({
  id: '/app/user',
  path: '/app/user',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedAppPaymentLinksRoute = AuthedAppPaymentLinksRouteImport.update({
  id: '/app/payment-links',
  path: '/app/payment-links',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedAppPolarCheckoutSuccessRoute =
  AuthedAppPolarCheckoutSuccessRouteImport.update({
    id: '/app/polar-checkout/success',
    path: '/app/polar-checkout/success',
    getParentRoute: () => AuthedRouteRoute,
  } as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/database': typeof StaticDatabaseRoute
  '/': typeof StaticIndexRoute
  '/app/payment-links': typeof AuthedAppPaymentLinksRoute
  '/app/user': typeof AuthedAppUserRoute
  '/auth/client': typeof StaticAuthClientRoute
  '/app': typeof AuthedAppIndexRoute
  '/auth': typeof StaticAuthIndexRoute
  '/app/polar-checkout/success': typeof AuthedAppPolarCheckoutSuccessRoute
}
export interface FileRoutesByTo {
  '/database': typeof StaticDatabaseRoute
  '/': typeof StaticIndexRoute
  '/app/payment-links': typeof AuthedAppPaymentLinksRoute
  '/app/user': typeof AuthedAppUserRoute
  '/auth/client': typeof StaticAuthClientRoute
  '/app': typeof AuthedAppIndexRoute
  '/auth': typeof StaticAuthIndexRoute
  '/app/polar-checkout/success': typeof AuthedAppPolarCheckoutSuccessRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/_static': typeof StaticRouteRouteWithChildren
  '/_static/database': typeof StaticDatabaseRoute
  '/_static/': typeof StaticIndexRoute
  '/_authed/app/payment-links': typeof AuthedAppPaymentLinksRoute
  '/_authed/app/user': typeof AuthedAppUserRoute
  '/_static/auth/client': typeof StaticAuthClientRoute
  '/_authed/app/': typeof AuthedAppIndexRoute
  '/_static/auth/': typeof StaticAuthIndexRoute
  '/_authed/app/polar-checkout/success': typeof AuthedAppPolarCheckoutSuccessRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/database'
    | '/'
    | '/app/payment-links'
    | '/app/user'
    | '/auth/client'
    | '/app'
    | '/auth'
    | '/app/polar-checkout/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/database'
    | '/'
    | '/app/payment-links'
    | '/app/user'
    | '/auth/client'
    | '/app'
    | '/auth'
    | '/app/polar-checkout/success'
  id:
    | '__root__'
    | '/_authed'
    | '/_static'
    | '/_static/database'
    | '/_static/'
    | '/_authed/app/payment-links'
    | '/_authed/app/user'
    | '/_static/auth/client'
    | '/_authed/app/'
    | '/_static/auth/'
    | '/_authed/app/polar-checkout/success'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  StaticRouteRoute: typeof StaticRouteRouteWithChildren
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_static': {
      id: '/_static'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StaticRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_static/': {
      id: '/_static/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof StaticIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/database': {
      id: '/_static/database'
      path: '/database'
      fullPath: '/database'
      preLoaderRoute: typeof StaticDatabaseRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/auth/': {
      id: '/_static/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof StaticAuthIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_authed/app/': {
      id: '/_authed/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AuthedAppIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_static/auth/client': {
      id: '/_static/auth/client'
      path: '/auth/client'
      fullPath: '/auth/client'
      preLoaderRoute: typeof StaticAuthClientRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_authed/app/user': {
      id: '/_authed/app/user'
      path: '/app/user'
      fullPath: '/app/user'
      preLoaderRoute: typeof AuthedAppUserRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/app/payment-links': {
      id: '/_authed/app/payment-links'
      path: '/app/payment-links'
      fullPath: '/app/payment-links'
      preLoaderRoute: typeof AuthedAppPaymentLinksRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/app/polar-checkout/success': {
      id: '/_authed/app/polar-checkout/success'
      path: '/app/polar-checkout/success'
      fullPath: '/app/polar-checkout/success'
      preLoaderRoute: typeof AuthedAppPolarCheckoutSuccessRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedAppPaymentLinksRoute: typeof AuthedAppPaymentLinksRoute
  AuthedAppUserRoute: typeof AuthedAppUserRoute
  AuthedAppIndexRoute: typeof AuthedAppIndexRoute
  AuthedAppPolarCheckoutSuccessRoute: typeof AuthedAppPolarCheckoutSuccessRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedAppPaymentLinksRoute: AuthedAppPaymentLinksRoute,
  AuthedAppUserRoute: AuthedAppUserRoute,
  AuthedAppIndexRoute: AuthedAppIndexRoute,
  AuthedAppPolarCheckoutSuccessRoute: AuthedAppPolarCheckoutSuccessRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface StaticRouteRouteChildren {
  StaticDatabaseRoute: typeof StaticDatabaseRoute
  StaticIndexRoute: typeof StaticIndexRoute
  StaticAuthClientRoute: typeof StaticAuthClientRoute
  StaticAuthIndexRoute: typeof StaticAuthIndexRoute
}

const StaticRouteRouteChildren: StaticRouteRouteChildren = {
  StaticDatabaseRoute: StaticDatabaseRoute,
  StaticIndexRoute: StaticIndexRoute,
  StaticAuthClientRoute: StaticAuthClientRoute,
  StaticAuthIndexRoute: StaticAuthIndexRoute,
}

const StaticRouteRouteWithChildren = StaticRouteRoute._addFileChildren(
  StaticRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  StaticRouteRoute: StaticRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
