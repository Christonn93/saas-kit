/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as StaticRouteRouteImport } from './routes/_static/route'
import { Route as AuthedRouteRouteImport } from './routes/_authed/route'
import { Route as StaticIndexRouteImport } from './routes/_static/index'
import { Route as StaticDatabaseIndexRouteImport } from './routes/_static/database/index'
import { Route as StaticAuthIndexRouteImport } from './routes/_static/auth/index'
import { Route as AuthedAppIndexRouteImport } from './routes/_authed/app/index'
import { Route as ApiWebhookPolarRouteImport } from './routes/api/webhook/polar'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth.$'
import { Route as StaticDatabaseQueriesRouteImport } from './routes/_static/database/queries'
import { Route as StaticAuthClientRouteImport } from './routes/_static/auth/client'
import { Route as AuthedAppPolarSubscriptionsRouteImport } from './routes/_authed/app/polar/subscriptions'
import { Route as AuthedAppPolarPortalRouteImport } from './routes/_authed/app/polar/portal'
import { Route as AuthedAppPolarCheckoutSuccessRouteImport } from './routes/_authed/app/polar/checkout.success'

const StaticRouteRoute = StaticRouteRouteImport.update({
  id: '/_static',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRouteRoute = AuthedRouteRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const StaticIndexRoute = StaticIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticDatabaseIndexRoute = StaticDatabaseIndexRouteImport.update({
  id: '/database/',
  path: '/database/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticAuthIndexRoute = StaticAuthIndexRouteImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => StaticRouteRoute,
} as any)
const AuthedAppIndexRoute = AuthedAppIndexRouteImport.update({
  id: '/app/',
  path: '/app/',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const ApiWebhookPolarRoute = ApiWebhookPolarRouteImport.update({
  id: '/api/webhook/polar',
  path: '/api/webhook/polar',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const StaticDatabaseQueriesRoute = StaticDatabaseQueriesRouteImport.update({
  id: '/database/queries',
  path: '/database/queries',
  getParentRoute: () => StaticRouteRoute,
} as any)
const StaticAuthClientRoute = StaticAuthClientRouteImport.update({
  id: '/auth/client',
  path: '/auth/client',
  getParentRoute: () => StaticRouteRoute,
} as any)
const AuthedAppPolarSubscriptionsRoute =
  AuthedAppPolarSubscriptionsRouteImport.update({
    id: '/app/polar/subscriptions',
    path: '/app/polar/subscriptions',
    getParentRoute: () => AuthedRouteRoute,
  } as any)
const AuthedAppPolarPortalRoute = AuthedAppPolarPortalRouteImport.update({
  id: '/app/polar/portal',
  path: '/app/polar/portal',
  getParentRoute: () => AuthedRouteRoute,
} as any)
const AuthedAppPolarCheckoutSuccessRoute =
  AuthedAppPolarCheckoutSuccessRouteImport.update({
    id: '/app/polar/checkout/success',
    path: '/app/polar/checkout/success',
    getParentRoute: () => AuthedRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof StaticIndexRoute
  '/auth/client': typeof StaticAuthClientRoute
  '/database/queries': typeof StaticDatabaseQueriesRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/webhook/polar': typeof ApiWebhookPolarRoute
  '/app': typeof AuthedAppIndexRoute
  '/auth': typeof StaticAuthIndexRoute
  '/database': typeof StaticDatabaseIndexRoute
  '/app/polar/portal': typeof AuthedAppPolarPortalRoute
  '/app/polar/subscriptions': typeof AuthedAppPolarSubscriptionsRoute
  '/app/polar/checkout/success': typeof AuthedAppPolarCheckoutSuccessRoute
}
export interface FileRoutesByTo {
  '/': typeof StaticIndexRoute
  '/auth/client': typeof StaticAuthClientRoute
  '/database/queries': typeof StaticDatabaseQueriesRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/webhook/polar': typeof ApiWebhookPolarRoute
  '/app': typeof AuthedAppIndexRoute
  '/auth': typeof StaticAuthIndexRoute
  '/database': typeof StaticDatabaseIndexRoute
  '/app/polar/portal': typeof AuthedAppPolarPortalRoute
  '/app/polar/subscriptions': typeof AuthedAppPolarSubscriptionsRoute
  '/app/polar/checkout/success': typeof AuthedAppPolarCheckoutSuccessRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteRouteWithChildren
  '/_static': typeof StaticRouteRouteWithChildren
  '/_static/': typeof StaticIndexRoute
  '/_static/auth/client': typeof StaticAuthClientRoute
  '/_static/database/queries': typeof StaticDatabaseQueriesRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/webhook/polar': typeof ApiWebhookPolarRoute
  '/_authed/app/': typeof AuthedAppIndexRoute
  '/_static/auth/': typeof StaticAuthIndexRoute
  '/_static/database/': typeof StaticDatabaseIndexRoute
  '/_authed/app/polar/portal': typeof AuthedAppPolarPortalRoute
  '/_authed/app/polar/subscriptions': typeof AuthedAppPolarSubscriptionsRoute
  '/_authed/app/polar/checkout/success': typeof AuthedAppPolarCheckoutSuccessRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/client'
    | '/database/queries'
    | '/api/auth/$'
    | '/api/webhook/polar'
    | '/app'
    | '/auth'
    | '/database'
    | '/app/polar/portal'
    | '/app/polar/subscriptions'
    | '/app/polar/checkout/success'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/client'
    | '/database/queries'
    | '/api/auth/$'
    | '/api/webhook/polar'
    | '/app'
    | '/auth'
    | '/database'
    | '/app/polar/portal'
    | '/app/polar/subscriptions'
    | '/app/polar/checkout/success'
  id:
    | '__root__'
    | '/_authed'
    | '/_static'
    | '/_static/'
    | '/_static/auth/client'
    | '/_static/database/queries'
    | '/api/auth/$'
    | '/api/webhook/polar'
    | '/_authed/app/'
    | '/_static/auth/'
    | '/_static/database/'
    | '/_authed/app/polar/portal'
    | '/_authed/app/polar/subscriptions'
    | '/_authed/app/polar/checkout/success'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRouteRoute: typeof AuthedRouteRouteWithChildren
  StaticRouteRoute: typeof StaticRouteRouteWithChildren
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiWebhookPolarRoute: typeof ApiWebhookPolarRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_static': {
      id: '/_static'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof StaticRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_static/': {
      id: '/_static/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof StaticIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/database/': {
      id: '/_static/database/'
      path: '/database'
      fullPath: '/database'
      preLoaderRoute: typeof StaticDatabaseIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/auth/': {
      id: '/_static/auth/'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof StaticAuthIndexRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_authed/app/': {
      id: '/_authed/app/'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AuthedAppIndexRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/api/webhook/polar': {
      id: '/api/webhook/polar'
      path: '/api/webhook/polar'
      fullPath: '/api/webhook/polar'
      preLoaderRoute: typeof ApiWebhookPolarRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_static/database/queries': {
      id: '/_static/database/queries'
      path: '/database/queries'
      fullPath: '/database/queries'
      preLoaderRoute: typeof StaticDatabaseQueriesRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_static/auth/client': {
      id: '/_static/auth/client'
      path: '/auth/client'
      fullPath: '/auth/client'
      preLoaderRoute: typeof StaticAuthClientRouteImport
      parentRoute: typeof StaticRouteRoute
    }
    '/_authed/app/polar/subscriptions': {
      id: '/_authed/app/polar/subscriptions'
      path: '/app/polar/subscriptions'
      fullPath: '/app/polar/subscriptions'
      preLoaderRoute: typeof AuthedAppPolarSubscriptionsRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/app/polar/portal': {
      id: '/_authed/app/polar/portal'
      path: '/app/polar/portal'
      fullPath: '/app/polar/portal'
      preLoaderRoute: typeof AuthedAppPolarPortalRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
    '/_authed/app/polar/checkout/success': {
      id: '/_authed/app/polar/checkout/success'
      path: '/app/polar/checkout/success'
      fullPath: '/app/polar/checkout/success'
      preLoaderRoute: typeof AuthedAppPolarCheckoutSuccessRouteImport
      parentRoute: typeof AuthedRouteRoute
    }
  }
}

interface AuthedRouteRouteChildren {
  AuthedAppIndexRoute: typeof AuthedAppIndexRoute
  AuthedAppPolarPortalRoute: typeof AuthedAppPolarPortalRoute
  AuthedAppPolarSubscriptionsRoute: typeof AuthedAppPolarSubscriptionsRoute
  AuthedAppPolarCheckoutSuccessRoute: typeof AuthedAppPolarCheckoutSuccessRoute
}

const AuthedRouteRouteChildren: AuthedRouteRouteChildren = {
  AuthedAppIndexRoute: AuthedAppIndexRoute,
  AuthedAppPolarPortalRoute: AuthedAppPolarPortalRoute,
  AuthedAppPolarSubscriptionsRoute: AuthedAppPolarSubscriptionsRoute,
  AuthedAppPolarCheckoutSuccessRoute: AuthedAppPolarCheckoutSuccessRoute,
}

const AuthedRouteRouteWithChildren = AuthedRouteRoute._addFileChildren(
  AuthedRouteRouteChildren,
)

interface StaticRouteRouteChildren {
  StaticIndexRoute: typeof StaticIndexRoute
  StaticAuthClientRoute: typeof StaticAuthClientRoute
  StaticDatabaseQueriesRoute: typeof StaticDatabaseQueriesRoute
  StaticAuthIndexRoute: typeof StaticAuthIndexRoute
  StaticDatabaseIndexRoute: typeof StaticDatabaseIndexRoute
}

const StaticRouteRouteChildren: StaticRouteRouteChildren = {
  StaticIndexRoute: StaticIndexRoute,
  StaticAuthClientRoute: StaticAuthClientRoute,
  StaticDatabaseQueriesRoute: StaticDatabaseQueriesRoute,
  StaticAuthIndexRoute: StaticAuthIndexRoute,
  StaticDatabaseIndexRoute: StaticDatabaseIndexRoute,
}

const StaticRouteRouteWithChildren = StaticRouteRoute._addFileChildren(
  StaticRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AuthedRouteRoute: AuthedRouteRouteWithChildren,
  StaticRouteRoute: StaticRouteRouteWithChildren,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiWebhookPolarRoute: ApiWebhookPolarRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { startInstance } from './start.tsx'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
    config: Awaited<ReturnType<typeof startInstance.getOptions>>
  }
}
